[{"title":"Player Creation - Platformer Tutorial Part 2 - Godot","url":"http://damarindra.com/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/","content":"<div class=\"spoiler collapsed\"><div class=\"spoiler-title\">Table of Content</div><div class=\"spoiler-content\"><!-- toc --></div></div>\n<p>This is the second part of the tutorial creating platformer game on Godot Engine.</p>\n<a id=\"more\"></a>\n<ol>\n<li><a href=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/\" title=\"Part 1 : Preparation\">Part 1 : Preparation</a></li>\n<li><strong>Part 2 : Player Creation</strong></li>\n</ol>\n<h1 id=\"Prepare-the-Node\"><a href=\"#Prepare-the-Node\" class=\"headerlink\" title=\"Prepare the Node\"></a>Prepare the Node</h1><p>Okay, now we will create a Player. First of all, create a new scene by clicking the <strong>Scene Menu</strong> at the top left toolbar, then select the <strong>New Scene</strong>. Now, new tab named as <strong>[empty]</strong> in the Scene View appears.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/create_scene.gif\" alt=\"Create Scene\" title=\"Create Scene\">\n<h2 id=\"Create-KinematicBody2D\"><a href=\"#Create-KinematicBody2D\" class=\"headerlink\" title=\"Create KinematicBody2D\"></a>Create KinematicBody2D</h2><p>Now go into <strong>Scene Window</strong>, create a new <strong>KinematicBody2D</strong> node, by clicking <strong>‘+’</strong> button and search KinematicBody2D, then  double click it or click create button. <strong>Rename</strong> the KinematicBody2D to “Player”.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/create_player.gif\" alt=\"Create KinematicBody2D\" title=\"Create KinematicBody2D\">\n<h2 id=\"Create-Sprite\"><a href=\"#Create-Sprite\" class=\"headerlink\" title=\"Create Sprite\"></a>Create Sprite</h2><p>Make sure Player Node has been selected, then create a <strong>Sprite</strong> Node by clicking the ‘+’ button, search Sprite and create it.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/create_sprite.gif\" alt=\"Create Sprite\" title=\"Create Sprite\">\n<p>Now we need to <strong>assign</strong> the sprite image, select the Sprite Node, go to the Inspector Window, navigate into the <strong>Texture</strong>, click the <strong><null> button</null></strong>, select <strong>Load</strong>. The new window will show up, select the <strong>tiles.png</strong>.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/manage_sprite.gif\" alt=\"Manage Sprite\" title=\"Manage Sprite\">\n<p>Sprite in Godot support for the tileset, so as you can see our image is a bunch of sprites with each tile size is 16px (for the character the size is 32px). Because our image size is 320px x 352px, so we need to set the <em> <strong>VFrames</strong> </em> 10 (320 / 32 = 10) and <em> <strong>HFrames</strong> </em> 11 (352 / 32 = 11). Divided by 32 because the character size is 32px x 32px.</p>\n<p>Now <strong>save</strong> the Node by press Ctrl + S, save as Player.tscn. Now try to change the <strong>Frame</strong> by clicking the up and down button on the right side.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/frame.jpg\" alt=\"Sprite Frame\" title=\"Sprite Frame\">\n<p>Doesn’t change anything?? Don’t panic, sometimes that happened. Make sure you have saved the Node, then close the Player Scene by clicking ‘x’ button at the tab Player, open again the Player.tscn from the FileSystem Window. Now try to change the Frame Value, now must be fixed.</p>\n<h2 id=\"Create-CollisionShape2D\"><a href=\"#Create-CollisionShape2D\" class=\"headerlink\" title=\"Create CollisionShape2D\"></a>Create CollisionShape2D</h2><p>Next, create a new node by <strong>right click</strong> the Player Node, select <strong>Add Child Node</strong>, find the <strong>CollisionShape2D</strong>, and create it.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/create_collision_node.gif\" alt=\"Create CollisionShape2D\" title=\"Create CollisionShape2D\">\n<p>Select the CollisionShape2D and go to the Inspector View, navigate to <strong>Shape</strong>, click the <null> button, select <strong>New RectangleShape2D</strong>. Now you can setup the collision size directly from the Scene View.</null></p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/create_collision_shape.gif\" alt=\"Create CollisionShape2D Shape\" title=\"Create CollisionShape2D Shape\">\n<p>That was only the preparation, now the real challenge just BEGIN!!</p>\n<h1 id=\"Ready-to-become-a-Wizard\"><a href=\"#Ready-to-become-a-Wizard\" class=\"headerlink\" title=\"Ready to become a Wizard?\"></a>Ready to become a Wizard?</h1><p>Script is like a human brain. Without a script, node can’t make a decision what should they do. In Godot, we use GDScript for the scripting language. C# support will be available in the future. GDScript is easy to learn, so don’t let yourself down now, at least try it a bit. You don’t know until you try, right? I bet when Godot V3 released, you will love scripting with GDScript inside Godot Editor, much improvement, I’ve been tried it!! If you don’t know anything about GDScript, I recommend to learn from <a href=\"http://docs.godotengine.org/en/stable/learning/scripting/gdscript/index.html\" target=\"_blank\" rel=\"external\">here</a>!!!</p>\n<p>So, back to the topic! Select Player node, see in the inspector, scroll into deep down, you will found <strong>Script</strong>, click the <null> button, select <strong>New Script</strong>. A new window will appear, for me, I just click the create button since I don’t want to change anything here. The 2D view will automatically switch to script view.</null></p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/create_script.gif\" alt=\"Create Script\" title=\"Create Script\">\n<p>Now we need to write some code, follow my script from now, read the code for the explanation.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends KinematicBody2D</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># defines GRAVITY</span></div><div class=\"line\"><span class=\"comment\"># `export` makes your variable editable in the editor</span></div><div class=\"line\"><span class=\"comment\"># `var GRAVITY = 10` defines a variable named GRAVITY and assign it 10</span></div><div class=\"line\">export var GRAVITY = <span class=\"number\">10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Called when the node is \"ready\", that means called when the game started.</span></div><div class=\"line\"><span class=\"comment\"># Use this function for initialize</span></div><div class=\"line\">func _ready():</div><div class=\"line\">\t<span class=\"comment\"># makes `_fixed_process(delta)` running</span></div><div class=\"line\">\tset_fixed_process(true)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Called during the fixed processing step of the main loop.</span></div><div class=\"line\"><span class=\"comment\"># Fixed processing means that the frame rate is synced to the physics,</span></div><div class=\"line\"><span class=\"comment\"># i.e. the delta variable should be constant.</span></div><div class=\"line\"><span class=\"comment\"># only active when set_fixed_process(true) is called</span></div><div class=\"line\">func _fixed_process(delta):</div><div class=\"line\">\t<span class=\"comment\"># make a Vector2 variable movement and add gravity into y axis</span></div><div class=\"line\">\tvar movement = Vector2(<span class=\"number\">0</span>,GRAVITY)</div><div class=\"line\">\t<span class=\"comment\"># apply the movement by calling move(movement*delta)</span></div><div class=\"line\">\tmove(movement*delta)</div></pre></td></tr></table></figure>\n<p>Press F6 to test it. Make sure the result is same as mine, the character will fall down. If your character just stays, or different as mine, there must be something wrong.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/result.gif\" alt=\"Result\" title=\"Result\">\n<p>If you come from Unity, you must be wondering about GRAVITY. The Gravity value is positive, means the character must go up, not down. Yes, I once thought that way, but in Godot 2D, the vector y is opposite, so the down direction is positive and up direction is negative, got it?</p>\n<h2 id=\"Create-the-Test-Scene\"><a href=\"#Create-the-Test-Scene\" class=\"headerlink\" title=\"Create the Test Scene\"></a>Create the Test Scene</h2><p>Create a new scene and add Node2D. After that, add <strong>StaticBody2D</strong> as a child of Node2D. Then add CollisionShape2D as a child of StaticBody2D. StaticBody2D is container for <em>non-moveable</em> CollisionShape2D (ex: ground), <a href=\"http://docs.godotengine.org/en/stable/learning/features/physics/physics_introduction.html\" target=\"_blank\" rel=\"external\">more about physics</a>. Now Create the new RectangleShape2D of the CollisionShape2D, resize and move it. <strong>Save</strong> it as World.tscn.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/setup_world.gif\" alt=\"Create World\" title=\"Create World\">\n<p>Now add a new <strong>Camera2D</strong> node as a child of Node2D. Set the Zoom into (0.25, 0.25) and set it on the Current option. Camera2D is a projection for 2D scenes, if we don’t use camera, the projection is always set from the (0,0) until the size of the viewport (found at project settings).</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/create_camera.gif\" alt=\"Create Camera2D\" title=\"Create Camera2D\">\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/camera_inspector.jpg\" alt=\"Camera Inspector\" title=\"Camera Inspector\">\n<p>Drag and drop <strong>player.tscn</strong> from the FileSystem window into <strong>Node2D</strong> at the Scene Window.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/assign_player.gif\" alt=\"Assign Player into Scene\" title=\"Assign Player into Scene\">\n<p>Don’t forget to set active the <strong>Visible Collision Shape</strong> from the <strong>Debug menu</strong> (inside of the play menu center top, right corner is the Debug Menu). When the option is set as ON, the collision will visible while play mode.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/visible_collision_shape.jpg\" alt=\"Visible Collision Shape\" title=\"Visible Collision Shape\">\n<p>Play it (press F6)</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/test_play.gif\" alt=\"Test Play\" title=\"Test Play\">\n<h3 id=\"Fixing-the-gravity\"><a href=\"#Fixing-the-gravity\" class=\"headerlink\" title=\"Fixing the gravity\"></a>Fixing the gravity</h3><p>When an object falling down because of gravity, the speed will increase incrementally. To do this, add one more variable to store our velocity</p>\n<p><code>var velocity = Vector2()</code></p>\n<p>And change the old code</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var movement = Vector2(<span class=\"number\">0</span>,GRAVITY)</div><div class=\"line\">move(movement*delta)</div></pre></td></tr></table></figure>\n<p>with this one</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var movement = Vector2(<span class=\"number\">0</span>, velocity.y + GRAVITY * delta)</div><div class=\"line\">velocity = movement</div><div class=\"line\">move(velocity)</div></pre></td></tr></table></figure>\n<p>So the final code will look like this</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends KinematicBody2D</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># defines GRAVITY</span></div><div class=\"line\"><span class=\"comment\"># `export` makes your variable editable in the editor</span></div><div class=\"line\"><span class=\"comment\"># `var GRAVITY = 10` defines a variable named GRAVITY and assign it 10</span></div><div class=\"line\">export var GRAVITY = <span class=\"number\">10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># store the player velocity</span></div><div class=\"line\">var velocity = Vector2()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Called when the node is \"ready\", that means called when the game started.</span></div><div class=\"line\"><span class=\"comment\"># Use this function for initialize</span></div><div class=\"line\">func _ready():</div><div class=\"line\">\t<span class=\"comment\"># makes `_fixed_process(delta)` running</span></div><div class=\"line\">\tset_fixed_process(true)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Called during the fixed processing step of the main loop.</span></div><div class=\"line\"><span class=\"comment\"># Fixed processing means that the frame rate is synced to the physics,</span></div><div class=\"line\"><span class=\"comment\"># i.e. the delta variable should be constant.</span></div><div class=\"line\"><span class=\"comment\"># only active when set_fixed_process(true) is called</span></div><div class=\"line\">func _fixed_process(delta):</div><div class=\"line\">\t<span class=\"comment\"># make a Vector2 variable movement and add gravity into y axis</span></div><div class=\"line\">\tvar movement = Vector2(<span class=\"number\">0</span>, velocity.y + GRAVITY * delta)</div><div class=\"line\">\t<span class=\"comment\"># set the velocity = movement</span></div><div class=\"line\">\tvelocity = movement</div><div class=\"line\">    \t<span class=\"comment\"># apply the movement by calling move(velocity)</span></div><div class=\"line\">    \tmove(velocity)</div></pre></td></tr></table></figure>\n<p>You can try to play it, press F6, the gravity will look good now, the fall speed will increase each frame, not constant like before.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/gravity_fix.gif\" alt=\"Gravity Fix\" title=\"Gravity Fix\">\n<h2 id=\"Make-the-player-moving\"><a href=\"#Make-the-player-moving\" class=\"headerlink\" title=\"Make the player moving\"></a>Make the player moving</h2><h3 id=\"Setup-the-Input-Map\"><a href=\"#Setup-the-Input-Map\" class=\"headerlink\" title=\"Setup the Input Map\"></a>Setup the Input Map</h3><p>We need to setup our <strong>Input Map</strong> to define what button we use in the game. For now, I need to define 5 buttons, <em>right, left, up, down, jump</em>. To do this, click <em>Scene - Project Settings - Input Map</em>, add new Action, just write the action name, for example, ‘right’, then click Add button. <strong>Re-do</strong> this until you have right, left, up, down, jump action. Then, scroll down and navigate your action. Select one of your action, for example, ‘right’ action. Then on the <strong>right side</strong>, you can find <strong>‘+’</strong> button, click it and select Key, now <strong>press ‘D’ key</strong> and click OK button. So, we have bound our right action with ‘D’ key. Re-do this step until our all action bound with a key.</p>\n<ul>\n<li>right : D</li>\n<li>left : A</li>\n<li>up : W</li>\n<li>down : S</li>\n<li>jump : Space</li>\n</ul>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/setup_input.gif\" alt=\"Setup Input Map\" title=\"Setup Input Map\">\n<h3 id=\"Horizontal-Movement\"><a href=\"#Horizontal-Movement\" class=\"headerlink\" title=\"Horizontal Movement\"></a>Horizontal Movement</h3><p>Now implement the horizontal movement. First of all, we need to add our Input variable.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">func _fixed_process(delta):</div><div class=\"line\">    \t<span class=\"comment\"># make a Vector2 variable movement and add gravity into y axis</span></div><div class=\"line\">    \tvar movement = Vector2(<span class=\"number\">0</span>, velocity.y + GRAVITY * delta)</div><div class=\"line\">    \t<span class=\"comment\">#input</span></div><div class=\"line\">    \tvar right_input = Input.is_action_pressed(<span class=\"string\">\"right\"</span>)</div><div class=\"line\">    \tvar left_input = Input.is_action_pressed(<span class=\"string\">\"left\"</span>)</div><div class=\"line\"><span class=\"comment\"># Some other code</span></div></pre></td></tr></table></figure>\n<p><code>Input.is_action_pressed(&quot;right&quot;)</code>, the parameter get from the Input Map Action name, If you still remember, we’ve been setup 5 input map right?</p>\n<p>Next one, we need to apply our movement velocity. First of all, we need to define the move speed, add one variable with export prefix, so we can edit while in the editor.</p>\n<p><code>export var MOVE_SPEED = 5</code></p>\n<p>Then, we create the movement logic.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">func _fixed_process(delta):</div><div class=\"line\">.....</div><div class=\"line\">    var left_input = Input.is_action_pressed(<span class=\"string\">\"left\"</span>)</div><div class=\"line\">    <span class=\"comment\">#Apply the horizontal movement</span></div><div class=\"line\">    <span class=\"keyword\">if</span> right_input:</div><div class=\"line\">        movement.x = MOVE_SPEED</div><div class=\"line\">    <span class=\"keyword\">elif</span> left_input:</div><div class=\"line\">        movement.x = -MOVE_SPEED</div><div class=\"line\">.....</div></pre></td></tr></table></figure>\n<p>So, if the right action is pressed, set the x axis of movement into = MOVE_SPEED, if the left action is pressed, then set the x axis of movement into = -MOVE_SPEED. Remember, the right direction is positive, left direction is negative.</p>\n<p>The final code looks like this</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends KinematicBody2D</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># defines GRAVITY</span></div><div class=\"line\"><span class=\"comment\"># `export` makes your variable editable in the editor</span></div><div class=\"line\"><span class=\"comment\"># `var GRAVITY = 10` defines a variable named GRAVITY and assign it 10</span></div><div class=\"line\">export var GRAVITY = <span class=\"number\">10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># MOVE_SPEED</span></div><div class=\"line\">export var MOVE_SPEED = <span class=\"number\">5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># store the player velocity</span></div><div class=\"line\">var velocity = Vector2()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Called when the node is \"ready\", that means called when the game started.</span></div><div class=\"line\"><span class=\"comment\"># Use this function for initialize</span></div><div class=\"line\">func _ready():</div><div class=\"line\">\t<span class=\"comment\"># makes `_fixed_process(delta)` running</span></div><div class=\"line\">\tset_fixed_process(true)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Called during the fixed processing step of the main loop.</span></div><div class=\"line\"><span class=\"comment\"># Fixed processing means that the frame rate is synced to the physics,</span></div><div class=\"line\"><span class=\"comment\"># i.e. the delta variable should be constant.</span></div><div class=\"line\"><span class=\"comment\"># only active when set_fixed_process(true) is called</span></div><div class=\"line\">func _fixed_process(delta):</div><div class=\"line\">\t<span class=\"comment\"># make a Vector2 variable movement and add gravity into y axis</span></div><div class=\"line\">\tvar movement = Vector2(<span class=\"number\">0</span>, velocity.y + GRAVITY * delta)</div><div class=\"line\">\t<span class=\"comment\">#input</span></div><div class=\"line\">\tvar right_input = Input.is_action_pressed(<span class=\"string\">\"right\"</span>)</div><div class=\"line\">\tvar left_input = Input.is_action_pressed(<span class=\"string\">\"left\"</span>)</div><div class=\"line\">\t<span class=\"comment\">#Apply the horizontal movement</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> right_input:</div><div class=\"line\">\t\tmovement.x = MOVE_SPEED</div><div class=\"line\">\t<span class=\"keyword\">elif</span> left_input:</div><div class=\"line\">\t\tmovement.x = -MOVE_SPEED</div><div class=\"line\">\t<span class=\"comment\"># set the velocity = movement</span></div><div class=\"line\">\tvelocity = movement</div><div class=\"line\">\t<span class=\"comment\"># apply the movement by calling move(velocity)</span></div><div class=\"line\">\tmove(velocity)</div></pre></td></tr></table></figure>\n<p>Try to play and press the ‘D’ or ‘A’ key.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/hor_move.gif\" alt=\"Horizontal Movement\" title=\"Horizontal Movement\">\n<h3 id=\"Fixing-the-Horizontal-Movement\"><a href=\"#Fixing-the-Horizontal-Movement\" class=\"headerlink\" title=\"Fixing the Horizontal Movement\"></a>Fixing the Horizontal Movement</h3><p>Did you notice it? While on the air, the movement is fast, and while on the ground, the movement is really slow. Before into that, see the explanation about how the character can moving.</p>\n<div class=\"alert info\"><p>Velocity number is just abstract number, not the real number. Used for explain where the character move!!</p>\n</div>\n<p><br></p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/exp.jpg\" alt=\"Explanation about Movement\" title=\"Explanation about Movement\">\n<p>Got it? now this is the explanation why the character really slow while on the ground</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/exp2.gif\" alt=\"Explanation about slow movement\" title=\"Explanation about slow movement\">\n<p>Understand? So the velocity.y is always pushing down, and the result of func move always stopped at where the collision detected, that’s the problem. So how we fix this? See the picture below.</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/exp3.gif\" alt=\"Explanation about fixing the movement\" title=\"Explanation about fixing the movement\">\n<p>There are so many ways to fix this, but I recommend this one. We can use slide function to fix this, it can handle all collision direction. Formula behind slide function is</p>\n<p><code>V1.slide(V2) = V2 - V1 * scalar(V1, V2)</code> Scalar is same as dot product, read <a href=\"http://docs.godotengine.org/en/stable/learning/features/math/vector_math.html\" target=\"_blank\" rel=\"external\">here</a> for more explanation.</p>\n<p>Now, implement the code! follow my lead!!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">func _fixed_process(delta):</div><div class=\"line\">....</div><div class=\"line\">    \t<span class=\"comment\"># set the velocity = movement</span></div><div class=\"line\">    \tvelocity = movement</div><div class=\"line\">    \t<span class=\"comment\"># apply the movement by calling move(velocity) and store the remaining movement</span></div><div class=\"line\">    \tvar remaining_movement = move(velocity)</div><div class=\"line\">    \t<span class=\"comment\"># collision handling</span></div><div class=\"line\">    \t<span class=\"keyword\">if</span> is_colliding():</div><div class=\"line\">        \tvar normal = get_collision_normal()</div><div class=\"line\">        \tremaining_movement = normal.slide(remaining_movement)</div><div class=\"line\">        \tvelocity = normal.slide(remaining_movement)</div><div class=\"line\">        \tmove(remaining_movement)</div></pre></td></tr></table></figure>\n<p>The final code looks like this</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">extends KinematicBody2D</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># defines GRAVITY</span></div><div class=\"line\"><span class=\"comment\"># `export` makes your variable editable in the editor</span></div><div class=\"line\"><span class=\"comment\"># `var GRAVITY = 10` defines a variable named GRAVITY and assign it 10</span></div><div class=\"line\">export var GRAVITY = <span class=\"number\">10</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># MOVE_SPEED</span></div><div class=\"line\">export var MOVE_SPEED = <span class=\"number\">5</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># store the player velocity</span></div><div class=\"line\">var velocity = Vector2()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Called when the node is \"ready\", that means called when the game started.</span></div><div class=\"line\"><span class=\"comment\"># Use this function for initialize</span></div><div class=\"line\">func _ready():</div><div class=\"line\">\t<span class=\"comment\"># makes `_fixed_process(delta)` running</span></div><div class=\"line\">\tset_fixed_process(true)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Called during the fixed processing step of the main loop.</span></div><div class=\"line\"><span class=\"comment\"># Fixed processing means that the frame rate is synced to the physics,</span></div><div class=\"line\"><span class=\"comment\"># i.e. the delta variable should be constant.</span></div><div class=\"line\"><span class=\"comment\"># only active when set_fixed_process(true) is called</span></div><div class=\"line\">func _fixed_process(delta):</div><div class=\"line\">\t<span class=\"comment\"># make a Vector2 variable movement and add gravity into y axis</span></div><div class=\"line\">\tvar movement = Vector2(<span class=\"number\">0</span>, velocity.y + GRAVITY * delta)</div><div class=\"line\">\t<span class=\"comment\">#input</span></div><div class=\"line\">\tvar right_input = Input.is_action_pressed(<span class=\"string\">\"right\"</span>)</div><div class=\"line\">\tvar left_input = Input.is_action_pressed(<span class=\"string\">\"left\"</span>)</div><div class=\"line\">\t<span class=\"comment\">#Apply the horizontal movement</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> right_input:</div><div class=\"line\">\t\tmovement.x = MOVE_SPEED</div><div class=\"line\">\t<span class=\"keyword\">elif</span> left_input:</div><div class=\"line\">\t\tmovement.x = -MOVE_SPEED</div><div class=\"line\">\t<span class=\"comment\"># set the velocity = movement</span></div><div class=\"line\">\tvelocity = movement</div><div class=\"line\">\t<span class=\"comment\"># apply the movement by calling move(velocity) and store the remaining movement</span></div><div class=\"line\">\tvar remaining_movement = move(velocity)</div><div class=\"line\">\t<span class=\"comment\"># collision handling</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> is_colliding():</div><div class=\"line\">\t\tvar normal = get_collision_normal()</div><div class=\"line\">\t\tremaining_movement = normal.slide(remaining_movement)</div><div class=\"line\">\t\tvelocity = normal.slide(remaining_movement)</div><div class=\"line\">\t\tmove(remaining_movement)</div></pre></td></tr></table></figure>\n<p>Test it and see, the result must be like this</p>\n<img src=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/hor_move_fix.gif\" alt=\"Fixing Movement while Colliding\" title=\"Fixing Movement while Colliding\">\n<p>So for today, that was enough. If you still have extra energy, follow this link. All of you are AWESOME!</p>\n<p>.</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["godot","tutorial","tutorial_platformer"],"tags":["Godot","gamedev","game","development","platformer"]},{"title":"Preparation - Platformer Tutorial Part 1 - Godot","url":"http://damarindra.com/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/","content":"<p>Hello everyone, this is my first godot tutorial. I will explain how I can achieve platformer game in godot engine. In this section only cover about preparation. I’m using :<br><a id=\"more\"></a></p>\n<ul>\n<li><a href=\"https://downloads.tuxfamily.org/godotengine/2.1.3/\" target=\"_blank\" rel=\"external\">Godot Engine v2.1.3</a></li>\n<li><a href=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/tiles.png\" title=\"Asset Tiles\">Asset Tiles</a>\n</li>\n</ul>\n<p>For now, what you need is only 2 items. You can install Godot from Steam, or just follow this <a href=\"https://downloads.tuxfamily.org/godotengine/2.1.3/\" target=\"_blank\" rel=\"external\">link</a> and download the executable file depend on your OS. You can grab the asset tile from <a href=\"https://opengameart.org/content/arcade-platformer-assets\" target=\"_blank\" rel=\"external\">grafxkid in opengameart</a>, or just download directly <a href=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/tiles.png\" title=\"here\">here</a> (background color already alpha).</p>\n<h2 id=\"Create-Project\"><a href=\"#Create-Project\" class=\"headerlink\" title=\"Create Project\"></a>Create Project</h2><p>If you know how to create project skip this one, otherwise you can follow my step. Open Godot Engine, you will see Project Window, click New Project Button (on the right side), click browse to make easier, in my case is D:/Godot/V2/Platformer_Tutorial.</p>\n<img src=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/create_project.jpg\" alt=\"Create Project\" title=\"Create Project\">\n<p>If you were done, click Create button. Now open the project by double click from the project list.</p>\n<h2 id=\"Manage-the-Asset-Sprite\"><a href=\"#Manage-the-Asset-Sprite\" class=\"headerlink\" title=\"Manage the Asset Sprite\"></a>Manage the Asset Sprite</h2><p>You can copy directly from the file explorer into your project folder, then you can back into Godot Engine. Your file must be available in the FileSystem Window.</p>\n<img src=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/copy_asset.jpg\" alt=\"Copy Asset Tiles into Project\" title=\"Copy Asset Tiles into Project\">\n<p>Press F1 or click the 2D button in the top toolbar to show 2D view. Then on the Scene window create root node by clicking the ‘+’ button, select Node2D.</p>\n<img src=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/create_node2d.jpg\" alt=\"Create Node2D\" title=\"Create Node2D\">\n<p>After that, drag and drop the tiles.png into the scene view (middle one). As you can see, the image is blurry.</p>\n<img src=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/blurry.jpg\" alt=\"Blurry Image\" title=\"Blurry Image\">\n<p>You can fix it by changing the flags option. Double click the tiles.png from the FileSystem window. Now go into Inspector window and change the Flags by disabling everything.</p>\n<img src=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/flags.jpg\" alt=\"Image Flags\" title=\"Image Flags\">\n<p>If the image on the scene still blurry, you can try by reloading the image. Still in the Inspector window, Click on the Image option - Load - select tiles.png. Now the image must be fixed.</p>\n<img src=\"/2017/08/24/godot_platformer_tutorial/godot-1-0-preparation/reload.gif\" alt=\"Reload Image\" title=\"Reload Image\">\n<p>Okay, the preparation is done, you can go to the <a href=\"/2017/08/28/godot_platformer_tutorial/godot-1-1-player-creation/\" title=\"next post\">next post</a> . Have Fun!!</p>\n<p>.</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["godot","tutorial","tutorial_platformer"],"tags":["Godot","gamedev","game","development","platformer"]},{"title":"Why Godot?","url":"http://damarindra.com/2017/08/23/godot_why_i_choose_godot/","content":"<h2 id=\"How-I-met-Godot\"><a href=\"#How-I-met-Godot\" class=\"headerlink\" title=\"How I met Godot?\"></a>How I met Godot?</h2><p>I do not really remember when it is, maybe January 2015 that was my first time I’ve found Godot. At that time, I’ve been joined open source community named Doscom (Dinus Open Source Community) and Doscom held a workshop about game development. So I’m the one who focussed on game development has a job to teaching.<br><a id=\"more\"></a> Because the community is open source, I need to find the open source game engine, and finally, I found out Godot. Why I chose Godot? I’m used to developing a game with Unity3D, and Godot is the similar one. Okay I will not explain more about the past, anyway you can check it <a href=\"https://doscom.org/blog/workshop-pembuatan-game-space-radian-dengan-godot-engine/\" target=\"_blank\" rel=\"external\">here</a> about the event.</p>\n<h2 id=\"Why-I’m-back-using-Godot\"><a href=\"#Why-I’m-back-using-Godot\" class=\"headerlink\" title=\"Why I’m back using Godot?\"></a>Why I’m back using Godot?</h2><p>Mid 2017, I’ve decided to use Godot again, why? Without open source (Doscom), I don’t know about Game Dev. So I want to give a feedback, the only way is using godot and share what I’ve learned. I will post blogs here, and maybe videos on youtube.</p>\n<h2 id=\"What-do-you-think-about-Unity-vs-Godot\"><a href=\"#What-do-you-think-about-Unity-vs-Godot\" class=\"headerlink\" title=\"What do you think about Unity vs Godot?\"></a>What do you think about Unity vs Godot?</h2><p>Okay, mostly I’ve been developing 2D games. After I try to using Godot again, I’ve been really surprised, Godot really easy when developing 2D games, for example, the KinematicBody2D has a move function. Move function calculates and detects a collision. As far as I know, Unity doesn’t has this function, only the CharacterController on 3D has the move function. Godot also has a tilemap node, which Unity doesn’t (planned September 2017 ??). So for me, this is really helpful!! TFW, KinematicBody can get the floor (collider) velocity!! Godot, you stole my heart!!</p>\n<p>If you want to know godot more, you can search it in google, there is so many article about godot. I will recommend this one <a href=\"http://www.gamefromscratch.com/post/2015/01/04/A-Closer-Look-at-the-Godot-Game-Engine.aspx\" target=\"_blank\" rel=\"external\">GameFromScratch</a></p>\n<h1 id=\"SUPPORT-GODOT\"><a href=\"#SUPPORT-GODOT\" class=\"headerlink\" title=\"SUPPORT GODOT\"></a>SUPPORT GODOT</h1><p>Don’t forget to support godot to make it good and more good!! If you can donate, you can support it via <a href=\"https://www.patreon.com/godotengine/posts\" target=\"_blank\" rel=\"external\">Patreon</a>, or just one time donation via <a href=\"https://godotengine.org/donate\" target=\"_blank\" rel=\"external\">Paypal</a>. Don’t worry if you can’t donate, you can support godot by using Godot for now, spread the words!!!</p>\n<p>.</p>\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":["godot"],"tags":["Godot","gamedev","game","development"]},{"title":"all-categories","url":"http://damarindra.com/all-categories/index.html","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"all-tags","url":"http://damarindra.com/all-tags/index.html","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]},{"title":"all-archives","url":"http://damarindra.com/all-archives/index.html","content":"<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","categories":[],"tags":[]}]